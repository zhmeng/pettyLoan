<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
	<context:component-scan base-package="com.hl.loan"/>
	<context:property-placeholder location="classpath*:dataSourceConfig.properties" />
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${initialPoolSize}"/>
		<!--连接池中保留的最小连接数。-->
		<property name="minPoolSize" value="${minPoolSize}"/>	
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${maxPoolSize}"/>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${maxIdleTime}"/>	
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${acquireIncrement}"/>	
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}"/>
	</bean>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		 <property name="hibernateProperties">
			 <value>
			 <!-- org.hibernate.dialect.MySQLInnoDBDialect -->
			 <!-- org.hibernate.dialect.MySQL5Dialect -->
			      hibernate.dialect=${hibernate.dialect}
			      hibernate.hbm2ddl.auto=${hbm2ddl}
			      hibernate.show_sql=${show_sql}
			      hibernate.format_sql=${format_sql}
			  </value>
		 </property>
		 <property name="packagesToScan">
            <list>
                <value>com.hl.loan.pojo</value>
            </list>
        </property>
	</bean>
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- 当不是用注解的形式时候，下面的可以进行一对多缓存 -->
	<!-- <bean id="baseProxy" lazy-init="true" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true"></bean> -->
	<!--使用基于注解方式配置事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" ></tx:annotation-driven> -->
	<tx:advice id="serviceAdvice" transaction-manager="transactionManager"> 
	    <tx:attributes>  
	        <tx:method name="add*" propagation="REQUIRED" rollback-for="Throwable"/>
	        <tx:method name="save*"  propagation="REQUIRED" rollback-for="Throwable"/>
	        <tx:method name="insert*"  propagation="REQUIRED" rollback-for="Throwable"/>
	        <tx:method name="del*" propagation="REQUIRED" rollback-for="Throwable"/> 
	        <tx:method name="update*" propagation="REQUIRED" rollback-for="Throwable"/>
	        <tx:method name="batchUpdate*" propagation="REQUIRED" rollback-for="Throwable"/>
	        <tx:method name="submit*" propagation="REQUIRED" rollback-for="Throwable"/>
	        <tx:method name="generate*" propagation="REQUIRED" rollback-for="Throwable"/>
	        <tx:method name="deploy*" propagation="REQUIRED" rollback-for="Throwable"/>
	        <tx:method name="start*" propagation="REQUIRED" rollback-for="Throwable"/>
	        <tx:method name="process*" propagation="REQUIRED" rollback-for="Throwable"/>
	         <tx:method name="conf*" propagation="REQUIRED" rollback-for="Throwable"/>
	        <tx:method name="*" read-only="true"/> 
	    </tx:attributes>  
    </tx:advice> 
	 <aop:config proxy-target-class="true"> 
       <aop:pointcut id="servicePointcut" expression="execution(* com.hl.loan.service.impl.*.*(..))"/> 
       <aop:advisor pointcut-ref="servicePointcut" advice-ref="serviceAdvice"/> 
    </aop:config>   
	
</beans>







